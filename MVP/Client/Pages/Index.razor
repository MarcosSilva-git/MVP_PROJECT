@page "/"
@using MVP.Client.Shared.Components
@using MVP.Infra.Enums
@using MVP.Shared.DTOs
@using System.Linq

@inject IJSRuntime JS

<PageTitle>HelpDesk</PageTitle>

<h1 class="text-center my-2">HelpDesk</h1>

<div class="d-flex justify-content-end">
    <button class="btn btn-success me-2" @onclick="ExportToExcel"
            disabled="@(Tickets is null || Tickets?.Count == 0)">
        Export to Excel
    </button>
    <button class="btn btn-primary" @onclick="ShowCreateTicketModal">Add Ticket</button>
</div>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (Tickets?.Count == 0)
{
    <p class="text-danger fs-4">Click in "Add Ticket" to add a new one.</p>
}
else if (Tickets is not null)
{
    <table class="table mt-4">
        <thead>
            <tr>
                <th class="text-center">ID</th>
                <th class="text-center">Title</th>
                <th class="text-center">Description</th>
                <th class="text-center">Status</th>
                <th class="text-center">Opening Date</th>
                <th class="text-center">Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in Tickets.OrderByDescending(t => t.Id))
            {
                <tr>
                    <td class="text-center align-middle">@ticket.Id</td>
                    <td class="text-center align-middle">@ticket.Title</td>
                    <td class="text-center align-middle">@ticket.Description</td>
                    <td class="text-center align-middle">@ticket.StatusName</td>
                    <td class="text-center align-middle">@ticket.OpeningDate.ToString("d")</td>
                    <td class="text-center align-middle">
                        <button class="btn btn-outline-primary" @onclick="() => ShowEditModal(ticket)">Edit</button>
                        <button class="btn btn-outline-danger" @onclick="() => DeleteTicket(ticket.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<TicketModal @bind-IsVisible="IsCreateModalVisible" OnTicketCreated="HandleTicketCreated" Ticket=@TicketSelected />

@code {
    List<TicketDTO> Tickets { get; set; }
    TicketDTO TicketSelected { get; set; } = new TicketDTO();
    bool IsLoading { get; set; }
    bool IsCreateModalVisible { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        var tickets = await HelpDeskHttp.GetFromJsonAsync<List<TicketDTO>>("api/Tickets/GetAllTickets");
        Tickets = tickets;

        IsLoading = false;
    }

    void ShowCreateTicketModal()
    {
        TicketSelected = new()
            {
                StatusId = (int)TicketStatusEnum.Open
            };
        IsCreateModalVisible = true;
    }

    async Task DeleteTicket(int ticketId)
    {
        var request = await HelpDeskHttp.DeleteFromJsonAsync<TicketDTO>($"api/Tickets/{ticketId}");

        if (request is not null)
        {
            var ticket = Tickets.First(t => t.Id == ticketId);
            Tickets.Remove(ticket);
        }

        await InvokeAsync(StateHasChanged);
    }

    void ShowEditModal(TicketDTO ticket)
    {
        TicketSelected = ticket;
        IsCreateModalVisible = true;
    }

    async void HandleTicketCreated(TicketDTO createdTicket)
    {
        HttpResponseMessage request;

        if (TicketSelected.Id == 0)
            request = await HelpDeskHttp.PostAsJsonAsync<TicketDTO>("api/Tickets/Create", createdTicket);
        else
            request = await HelpDeskHttp.PutAsJsonAsync<TicketDTO>("api/Tickets/Update", TicketSelected);

        if (request.IsSuccessStatusCode)
        {
            var response = await request.Content.ReadFromJsonAsync<TicketDTO>();
            var findedTicket = Tickets.Where(t => t.Id == response?.Id).FirstOrDefault();

            if (findedTicket is not null)
            {
                Tickets.Remove(findedTicket);
                Tickets.Add(response);
            }
            else
                Tickets.Add(response);


            IsCreateModalVisible = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task ExportToExcel()
    {
        var request = await HelpDeskHttp.PostAsJsonAsync<List<TicketDTO>>("api/Tickets/ExportToExcel", Tickets);

        if (request.IsSuccessStatusCode)
        {
            var response = await request.Content.ReadAsStreamAsync();

            var streamRef = new DotNetStreamReference(stream: response);

            await JS.InvokeVoidAsync("downloadFileFromStream", "Tickets.xlsx", streamRef);
        }
    }
}
