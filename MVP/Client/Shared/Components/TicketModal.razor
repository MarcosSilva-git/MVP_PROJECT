@using MVP.Shared.DTOs;
@using MVP.Infra.Entities;
@using MVP.Infra.Enums;


<div class="modal fade @(IsVisible ? "show d-block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle</h5>
                <button type="button" class="close" @onclick="HideModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Ticket" OnValidSubmit="CreateTicket">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label>Title:</label>
                        <InputText @bind-Value="@Ticket.Title" class="form-control" />
                        <ValidationMessage For="@(() => Ticket.Title)" />
                    </div>
                    <div class="form-group mt-2">
                        <label>Description:</label>
                        <InputTextArea @bind-Value="@Ticket.Description" class="form-control" />
                        <ValidationMessage For="@(() => Ticket.Description)" />
                    </div>

                    <div class="form-group mt-2">
                        <label>Status:</label>
                        <InputSelect @bind-Value="@Ticket.StatusId" class="btn btn-secondary w-100">
                            @foreach (var status in TicketStatus)
                            {
                                <option value="@status.Id">@((TicketStatusEnum)status.Id)</option>
                            }
                            <ValidationMessage For="@(() => Ticket.StatusId)" />
                        </InputSelect>

                    </div>

                    <div class="form-group d-flex mt-3">
                        <button type="button" @onclick="HideModal" class="btn btn-outline-danger w-50 me-2">Cancel</button>
                        @if (IsNewTicket)
                        {
                            <button type="submit" class="btn btn-success w-50 mw-2">Add Ticket</button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-success w-50 mw-2">Save Changes</button>
                        }
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade @(IsVisible ? "show" : "")" style="display: @(IsVisible ? "block" : "none")"></div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public EventCallback<TicketDTO> OnTicketCreated { get; set; }

    [Parameter]
    public TicketDTO Ticket { get; set; } = new TicketDTO();

    public List<TicketStatus> TicketStatus { get; set; } = new();

    bool IsNewTicket => Ticket.Id == 0;
    string ModalTitle => IsNewTicket ? "Add Ticket" : "Edit Ticket";

    protected override async Task OnInitializedAsync()
    {
        var request = await HelpDeskHttp.GetFromJsonAsync<List<TicketStatus>>("api/Tickets/TicketStatus");

        TicketStatus = request;
    }

    void HideModal()
    {
        IsVisible = false;
    }

    async Task CreateTicket()
    {
        await OnTicketCreated.InvokeAsync(Ticket);
    }
}
